useReducer

usereducer is a hook that is used for state management
it is an alternative to useState
what is the diffrente?
useState is build using useReducer
when to useReducer vs useState? hmmm..

Hooks so far...

useState - state
useEffect - side effects and lyfecycle
useContext - context API
useReducer - reducers

reduce executes a reduces functions on each element array, resulting in a single output

array = [1,2,3,4]
const reducer = (accumulator, currentValue) => accumulator + currentValue
// 1+2+3+4
console.log(array.reduce(reducer))
// output: 10

// 5+1+2+3+4
reduce accepts a second parameter that is the initial value
console.log(array.reduce(reducer, 5))
// output: 15

reduce accepts two parameters
1- reducer -> reducer function who has as parameter 
    -> the output 
    -> current value
2- initial value

there is a huge similiraty between reduce and useReducer

reduce in Javascript                    | useReducer in React
value = reducer(accumulator, itemvalue) | newState = reducer(currentState, action)
reduce method returns a single value    | useReducer returns a pair of values [newState, dispatch]

currentState , action -> details of the transition from the currentState to the newState
newstate, dispatch -> used specify the action



Example

        import React, { useReducer } from 'react'

        // define the initial state
        const initialState = 0;
        // define the function of reducer that received as parameter
        // the state and the action
        const reducer = (state, action) => {
            // use a switch to determine what action was executed
            switch (action) {
                case 'increment':
                    return state + 1
                case 'decrement':
                    return state - 1
                case 'reset':
                    return initialState
                default:
                    return state
            }
        }

        function HookCounterReduce() {
            // we implement the userreducer according to te reducer we defined outside the funtion and the initialstate
            // return the count that is the new state and a dispatch that allows to execute the code corresponding to a particular action  
            // dispatch allow us to send the action we want to execute
            const [count, dispatch] = useReducer(reducer, initialState);

            return (
                <div>
                    Count: {count}
                    <button onClick={() => dispatch('increment')}>Increment</button>
                    <button onClick={() => dispatch('decrement')}>Decrement</button>
                    <button onClick={() => dispatch('reset')}>Reset</button>
                </div>
            )
        }

        export default HookCounterReduce


Also we can use complex objects


        import React, { useReducer } from 'react'

        // define the initial state
        const initialState = {
            firstCounter: 0,
            secondCounter: 10
        }
        // define the function of reducer that received as parameter
        // the state and the action
        const reducer = (state, action) => {
            // use a switch to determine what action was executed
            // we can add more data in the action like type, avalue
            switch (action.type) {
                case 'increment':
                    return { ...state, firstCounter: state.firstCounter + action.value }
                case 'decrement':
                    return { ...state, firstCounter: state.firstCounter - action.value }
                case 'increment2':
                    return { ...state, secondCounter: state.secondCounter + action.value }
                case 'decrement2':
                    return { ...state, secondCounter: state.secondCounter - action.value }
                case 'reset':
                    return initialState
                default:
                    return state
            }
        }

        function HookCounterComplexReduce() {
            // we implement the userreducer according to te reducer we defined outside the funtion and the initialstate
            // return the count that is the new state and a dispatch that allows to execute the code corresponding to a particular action  
            // dispatch allow us to send the action we want to execute
            const [count, dispatch] = useReducer(reducer, initialState);

            return (
                <div>
                    First count: {count.firstCounter} <br/>
                    Second count: {count.secondCounter} <br/>
                    <button onClick={() => dispatch({ type: 'increment', value: 1 })}>Increment</button>
                    <button onClick={() => dispatch({ type: 'decrement', value: 1 })}>Decrement</button>
                    <button onClick={() => dispatch({ type: 'increment', value: 5 })}>Increment 5</button>
                    <button onClick={() => dispatch({ type: 'decrement', value: 5 })}>Decrement 5</button>
                    <button onClick={() => dispatch({ type: 'increment2', value: 1 })}>2 Increment</button>
                    <button onClick={() => dispatch({ type: 'decrement2', value: 1 })}>2 Decrement</button>
                    <button onClick={() => dispatch({ type: 'increment2', value: 5 })}>2 Increment 5</button>
                    <button onClick={() => dispatch({ type: 'decrement2', value: 5 })}>2 Decrement 5</button>
                    <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
                </div>
            )
        }

        export default HookCounterComplexReduce


when i use usestate :
- primitives

when i use useReducer
- many transitions and calls

Related 










useReducer - local state management

share state among components - global state management

useReducer + useContext

scenario:

- app

root
A B C

each component has a counter

every component will use useReducer() hook

share the counter value

we have to implment a counter that is accessible to a component

we need a global counter 

we need the necesarry components


