Refs

Allows to access the nodes of the DOM from a react component


import React, { Component } from 'react'
export class RefsDemo extends Component {

    constructor(props) {
        super(props);
        // declare the variable of the ref
        this.inputRef = React.createRef();        
    }

    
    
    render() {
        return (
            <div>
                <input type="text" ref={this.setCbRef} />
                <button onClick={this.clickHandler}>Click</button>
            </div>
        )
    }

    componentDidMount() {
        // once the component has already rendered we can access by using the property current
        // in this case we focus the input
        this.inputRef.current.focus();
        console.log(this.inputRef);
    }

    clickHandler = () => {
        // access to the  
        alert(this.inputRef.current.value);
    }


}

export default RefsDemo



We also can create references to a component we created before

Input component: 
    import React, { Component } from 'react'

    export class Input extends Component 
    {

        constructor(props) {
            super(props)
            this.inputReact = React.createRef();        
        }

        focusInput(){
            this.inputReact.current.focus();
        }


        
        render() {
            return (
                <div>
                    <input type="text" ref={this.inputReact}/>
                </div>
            )
        }
    }

    export default Input

Focus Input
    import React, { Component } from 'react'
    import Input from './Input'

    export class FocusInput extends Component {

        constructor(props) {
            super(props)
            this.componentRef = React.createRef();    
        }
        
        clickHandler = () => {
            this.componentRef.current.focusInput();
        }

        render() {
            return (
                <div>
                    <Input ref={this.componentRef}/>
                    <button onClick={this.clickHandler}>Button input</button>
                </div>
            )
        }
    }

    export default FocusInput

As you see a cmponent has a references of the other component

Forwarding Refs
other way to pass the references

const FRInput = React.forwardRef((props, ref) => {


    return (
        <div>
            <input type="text" ref={ref} />
        </div>
    )
})

export default FRInput


And the parent :

import React, { Component } from 'react'
import FRInput from './FRInput'

class FRParentInput extends Component {
    constructor(props) {
        super(props)

        this.inputRef = React.createRef();
    }

    clickHandler = () => {
        this.inputRef.current.focus();
    }

    render() {
        return (
            <div>
                <FRInput ref={this.inputRef}></FRInput>
                <button onClick={this.clickHandler}>Focus Input FR</button>
            </div>
        )
    }
}

export default FRParentInput
